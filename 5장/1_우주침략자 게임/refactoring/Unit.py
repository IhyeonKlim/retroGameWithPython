import pygame
from pygame.locals import Rect

# Unit 클래스
class Unit:
    def __init__(self, x, y, color):
        self.rect = Rect(0, 0, 22, 12)     # 기본 유닛 크기 설정 (픽셀 단위)
        self.rect.centerx = x             # 유닛 중심 X좌표 위치 지정
        self.rect.centery = y             # 유닛 중심 Y좌표 위치 지정
        self.character = []               # ASCII 기반의 도트 이미지 (2D 배열 또는 프레임 배열)
        self.enable = True                # 유닛 활성화 여부 (죽거나 사라졌는지 여부)
        self.frame_index = 0              # 현재 애니메이션 프레임 인덱스
        self.color = color                # 유닛 색상 저장

    def get_draw_data(self):
        # 프레임 인덱스가 범위를 넘으면 리셋
        if self.frame_index >= len(self.character):
            self.frame_index = 0

        return self

    def move_left(self):
        self.rect.centerx -= 2  # 왼쪽 이동
        self.frame_index = (self.frame_index + 1) % 2  # 프레임 변경 (깜빡이기용)
        return True

    def move_right(self):
        self.rect.centerx += 2  # 오른쪽 이동
        self.frame_index = (self.frame_index + 1) % 2  # 프레임 변경
        return True

# Player 클래스 (unit 상속)
class Player(Unit):
    def __init__(self, x, y, color):
        super().__init__(x, y, color)
        self.character = [[  # 플레이어 도트 형태 (고정 프레임 하나)
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ]]

# ------------------------------
# 적 클래스 (unit 상속, 2프레임)
# ------------------------------
class Enemy(Unit):
    def __init__(self, x, y, color):
        super().__init__(x, y, color)
        # 2프레임으로 구성된 ASCII 도트 이미지
        self.character = [[[0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
                           [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
                           [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                           [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                           [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1],
                           [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1],
                           [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0]],
                          [[0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
                           [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
                           [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                           [1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                           [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
                           [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
                           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0]]]
        self.delay = 10                   # 이동 주기 딜레이 (프레임 기준)

    def move_down(self):
        self.rect.centery += 6            # 아래로 6픽셀 이동
        return True

    def fire(self, bullet_pool, fired_list):
        if bullet_pool:                   # 발사 가능한 총알이 남아있다면
            bullet = bullet_pool.pop(0)   # 총알 풀에서 하나 꺼내기
            bullet.color = self.color     # 총알 색상 = 유닛 색상
            bullet.fire(self.rect.centerx, self.rect.bottom)  # 적 아래에서 발사
            fired_list.append(bullet)     # 발사된 총알 리스트에 추가

# Ufo 클래스
class Ufo(Enemy):
    def __init__(self, x, y, color):
        super().__init__(x, y, color)
        self.character = [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                           [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
                           [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0],
                           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                           [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]]]
        self.delay = 5
# ------------------------------
# 벽 오브젝트 클래스
# ------------------------------
class Wall:
    def __init__(self, x, y, color):
        self.rect = Rect(0, 0, 45, 20)     # 벽 전체 영역 정의
        self.rect.centerx = x             # 중심 X좌표
        self.rect.centery = y             # 중심 Y좌표
        self.body = [                     # 벽의 실제 블록 구성 (2D 배열)
            [0, 0, 1, 1, 1, 1, 1, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0, 0, 0, 1, 1]
        ]
        self.color = color                # 벽 색상

    def colliderect(self, bullet):
        # 총알이 벽 블록 중 하나와 충돌했는지 검사
        for y, line in enumerate(self.body):
            ry = self.rect.y + (y * 5)    # 블록 단위 Y 위치
            for x, pt in enumerate(line):
                if pt <= 0:
                    continue              # 비어있는 블록은 무시

                rx = self.rect.x + (x * 5)  # 블록 단위 X 위치
                if Rect(rx, ry, 5, 5).colliderect(bullet.rect):
                    self.body[y][x] = 0   # 충돌한 블록 제거
                    return True

        return False                      # 충돌 없음